{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"colab":{"name":"Копия блокнота \"fb.ipynb\"","provenance":[{"file_id":"https://github.com/Alexsun8/fb_nn/blob/br1/fb.ipynb","timestamp":1600844387198}],"collapsed_sections":[]},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"K1oZPuHvsEi1","colab_type":"code","colab":{},"outputId":"dda27f9f-e06d-409b-a8db-f53b90a06c00"},"source":["!pip3 install torch\n","!pip3 install torchvision\n","!pip3 install numpy\n","\n","import torch\n","import random\n","import numpy as np\n","import torch as torch\n","from torch.utils.data import dataloader, dataset\n","import torchvision\n","#\n","# random.seed(0)\n","# np.random.seed(0)\n","# torch.manual_seed(0)\n","# torch.cuda.manual_seed(0)\n","from torch.utils.data.sampler import SubsetRandomSampler\n","from torchvision.models.detection import transform\n","from torchvision import transforms\n","torch.backends.cudnn.deterministic = True\n","# import pycuda.autoinit\n","# import pycuda.driver as drv"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting torch\r\n","^C\r\n","\u001b[31mERROR: Operation cancelled by user\u001b[0m\r\n","Collecting torchvision\r\n","  Using cached torchvision-0.7.0-cp38-cp38-manylinux1_x86_64.whl (5.9 MB)\r\n","Collecting torch==1.6.0\r\n","  Using cached torch-1.6.0-cp38-cp38-manylinux1_x86_64.whl (748.8 MB)\r\n","Collecting numpy\r\n","  Downloading numpy-1.19.2-cp38-cp38-manylinux2010_x86_64.whl (14.5 MB)\r\n","\u001b[K     |████████████████████████████████| 14.5 MB 11.0 MB/s eta 0:00:01\r\n","\u001b[?25hCollecting pillow>=4.1.1\r\n","  Downloading Pillow-7.2.0-cp38-cp38-manylinux1_x86_64.whl (2.2 MB)\r\n","\u001b[K     |████████████████████████████████| 2.2 MB 10.9 MB/s eta 0:00:01\r\n","\u001b[?25hCollecting future\r\n","  Using cached future-0.18.2.tar.gz (829 kB)\r\n","Building wheels for collected packages: future\r\n","  Building wheel for future (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n","\u001b[?25h  Created wheel for future: filename=future-0.18.2-py3-none-any.whl size=491059 sha256=4f22cce3c143bc2114237b3e5ca45a8a197d60360a1b632d8fe18fc47a5f91ce\r\n","  Stored in directory: /home/alexsun/.cache/pip/wheels/8e/70/28/3d6ccd6e315f65f245da085482a2e1c7d14b90b30f239e2cf4\r\n","Successfully built future\r\n","Installing collected packages: numpy, future, torch, pillow, torchvision\r\n","Successfully installed future-0.18.2 numpy-1.19.2 pillow-7.2.0 torch-1.6.0 torchvision-0.7.0\r\n","Requirement already satisfied: numpy in /home/alexsun/anaconda3/envs/task/lib/python3.8/site-packages (1.19.2)\r\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"AWNn5czWsEi5","colab_type":"code","colab":{},"outputId":"3890bb56-6cc0-48f6-cd4e-dd77c66928a8"},"source":["# CUDA for PyTorch\n","use_cuda = torch.cuda.is_available()\n","device = torch.device(\"cuda:0\" if use_cuda else \"cpu\")\n","torch.backends.cudnn.benchmark = True\n","torch.backends.cudnn.enabled"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"CnaKUc5DsEi8","colab_type":"code","colab":{}},"source":["import csv\n","import os\n","from re import search\n","\n","def make_img_folder(dataPath, csvPath, imgFolder):\n","    with open(csvPath) as f:\n","        reader = csv.reader(f)\n","        for row in reader:\n","            if row[0].isdigit():\n","                print(f\"cp {dataPath}/{'.'.join([row[0],'png'])} {imgFolder}/{row[1]}/\")\n","                os.system(f\"mv {dataPath}/{'.'.join([row[0],'png'])} {imgFolder}/{row[1]}/\")\n","Data_path = \"/home/alexsun/diskb/streamlabs/task/images\"\n","csv_path = \"/home/alexsun/diskb/streamlabs/task/images_labelling.csv\"\n","imgFolder = \"/home/alexsun/diskb/streamlabs/task/data\"\n","# make_img_folder(Data_path, csv_path, imgFolder)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"Y66lzCx-sEi_","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"hfD9a3HfsEjC","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"11aBwZDpsEjF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600860081524,"user_tz":-180,"elapsed":5318,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}}},"source":["from __future__ import print_function, division\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","import numpy as np\n","import torchvision\n","from torchvision import datasets, models, transforms\n","import matplotlib.pyplot as plt\n","import time\n","import os\n","import copy\n","\n","from sklearn.model_selection import train_test_split\n","\n","\n","plt.ion()   # interactive mode"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"Vio1UQ2isEjH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1600860109773,"user_tz":-180,"elapsed":29281,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}},"outputId":"0e5051bc-148e-40dd-f6f3-39a134a5623f"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uoTXWhzzwTC6","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600860111327,"user_tz":-180,"elapsed":629,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}}},"source":["def train_val_dataset(dataset, val_split=0.25):\n","    train_idx, val_idx = train_test_split(list(range(len(dataset))), test_size=val_split)\n","    datasets = {}\n","    datasets['train'] = torch.utils.data.Subset(dataset, train_idx)\n","    datasets['val'] = torch.utils.data.Subset(dataset, val_idx)\n","    return datasets\n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"H9qO98YcsEjK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1600865846298,"user_tz":-180,"elapsed":735,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}},"outputId":"8498cdc6-36d9-4bb9-f02f-2878a90b5afa"},"source":["# data_transforms = {\n","#     'train': transforms.Compose([\n","#         transforms.RandomResizedCrop(224),\n","#         transforms.RandomHorizontalFlip(),\n","#         transforms.ToTensor(),\n","#         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","#     ]),\n","#     'val': transforms.Compose([\n","#         transforms.Resize(256),\n","#         transforms.CenterCrop(224),\n","#         transforms.ToTensor(),\n","#         transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","#     ]),\n","# }\n","\n","data_transforms =  transforms.Compose([\n","        transforms.RandomResizedCrop(224),\n","        transforms.RandomHorizontalFlip(),\n","        transforms.ToTensor(),\n","        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","    ])\n","\n","data_dir = '/content/gdrive/My Drive/data'\n","image_datasets = datasets.ImageFolder('/content/gdrive/My Drive/data',\n","                                          transform = data_transforms)\n","                 \n","# dataloaders = torch.utils.data.DataLoader(image_datasets[x], batch_size=4,\n","#                                              shuffle=True, num_workers=4)\n","              \n","\n","dataset_sizes = len(image_datasets)\n","class_names = image_datasets.classes\n","\n","print(dataset_sizes)\n","\n","data = train_val_dataset(image_datasets,0.3)\n","\n","print(len(data['train']))\n","print(len(data['val']))\n","\n","# The original dataset is available in the Subset class\n","print(data['train'].dataset)\n","\n","dataloaders = {x:torch.utils.data.DataLoader(data[x],32, shuffle=True, num_workers=4) for x in ['train','val']}\n","# x,y = next(iter(dataloaders['train']))\n","# print(x.shape, y.shape)\n","\n","\n","\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","device"],"execution_count":30,"outputs":[{"output_type":"stream","text":["3750\n","2625\n","1125\n","Dataset ImageFolder\n","    Number of datapoints: 3750\n","    Root location: /content/gdrive/My Drive/data\n","    StandardTransform\n","Transform: Compose(\n","               RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=PIL.Image.BILINEAR)\n","               RandomHorizontalFlip(p=0.5)\n","               ToTensor()\n","               Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","           )\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["device(type='cuda', index=0)"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"pepSqkEgsEjN","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600865852117,"user_tz":-180,"elapsed":658,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}}},"source":["def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n","    since = time.time()\n","\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_acc = 0.0\n","\n","    for epoch in range(num_epochs):\n","        print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n","        print('-' * 10)\n","\n","        # Each epoch has a training and validation phase\n","        for phase in ['train', 'val']:\n","            if phase == 'train':\n","                model.train()  # Set model to training mode\n","            else:\n","                model.eval()   # Set model to evaluate mode\n","\n","            running_loss = 0.0\n","            running_corrects = 0\n","\n","            # Iterate over data.\n","            for inputs, labels in dataloaders[phase]:\n","                inputs = inputs.to(device)\n","                labels = labels.to(device)\n","\n","                # zero the parameter gradients\n","                optimizer.zero_grad()\n","\n","                # forward\n","                # track history if only in train\n","                with torch.set_grad_enabled(phase == 'train'):\n","                    outputs = model(inputs)\n","                    _, preds = torch.max(outputs, 1)\n","                    loss = criterion(outputs, labels)\n","\n","                    # backward + optimize only if in training phase\n","                    if phase == 'train':\n","                        loss.backward()\n","                        optimizer.step()\n","\n","                # statistics\n","                running_loss += loss.item() * inputs.size(0)\n","                running_corrects += torch.sum(preds == labels.data)\n","            if phase == 'train':\n","                scheduler.step()\n","\n","            epoch_loss = running_loss / len(data[phase])\n","            epoch_acc = running_corrects.double() / len(data[phase])\n","\n","            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n","                phase, epoch_loss, epoch_acc))\n","\n","            # deep copy the model\n","            if phase == 'val' and epoch_acc > best_acc:\n","                best_acc = epoch_acc\n","                best_model_wts = copy.deepcopy(model.state_dict())\n","\n","        print()\n","\n","    time_elapsed = time.time() - since\n","    print('Training complete in {:.0f}m {:.0f}s'.format(\n","        time_elapsed // 60, time_elapsed % 60))\n","    print('Best val Acc: {:4f}'.format(best_acc))\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","    return model"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"vkSMM2xhsEjP","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600878642351,"user_tz":-180,"elapsed":1067,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}}},"source":["model_ft = models.resnet18(pretrained=True)\n","num_ftrs = model_ft.fc.in_features\n","# Here the size of each output sample is set to 2.\n","# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\n","model_ft.fc = nn.Linear(num_ftrs, 25)\n","\n","model_ft = model_ft.to(device)\n","\n","criterion = nn.CrossEntropyLoss()\n","\n","# Observe that all parameters are being optimized\n","optimizer_ft = optim.Adam(model_ft.parameters(), lr=0.001)\n","\n","# Decay LR by a factor of 0.1 every 7 epochs\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=15, gamma=0.5)"],"execution_count":46,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nrn39bZd0WnY","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600878643665,"user_tz":-180,"elapsed":668,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}}},"source":["!export CUDA_LAUNCH_BLOCKING=1; "],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"1GHF8iiXsEjS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1600879657357,"user_tz":-180,"elapsed":1011736,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}},"outputId":"f7ef1c07-aebe-41c9-da8b-184da662acf8"},"source":["model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n","                       num_epochs=100)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["Epoch 0/99\n","----------\n","train Loss: 2.0129 Acc: 0.3223\n","val Loss: 2.2124 Acc: 0.3138\n","\n","Epoch 1/99\n","----------\n","train Loss: 1.6446 Acc: 0.4225\n","val Loss: 2.1717 Acc: 0.3822\n","\n","Epoch 2/99\n","----------\n","train Loss: 1.5118 Acc: 0.4571\n","val Loss: 2.0449 Acc: 0.3502\n","\n","Epoch 3/99\n","----------\n","train Loss: 1.4314 Acc: 0.4830\n","val Loss: 1.4870 Acc: 0.4942\n","\n","Epoch 4/99\n","----------\n","train Loss: 1.3322 Acc: 0.5215\n","val Loss: 1.6061 Acc: 0.4800\n","\n","Epoch 5/99\n","----------\n","train Loss: 1.2185 Acc: 0.5710\n","val Loss: 1.2664 Acc: 0.5636\n","\n","Epoch 6/99\n","----------\n","train Loss: 1.1646 Acc: 0.5855\n","val Loss: 1.2977 Acc: 0.5653\n","\n","Epoch 7/99\n","----------\n","train Loss: 1.1525 Acc: 0.5909\n","val Loss: 1.2621 Acc: 0.5582\n","\n","Epoch 8/99\n","----------\n","train Loss: 1.0587 Acc: 0.6248\n","val Loss: 1.4860 Acc: 0.4933\n","\n","Epoch 9/99\n","----------\n","train Loss: 1.1106 Acc: 0.6152\n","val Loss: 1.2569 Acc: 0.5733\n","\n","Epoch 10/99\n","----------\n","train Loss: 1.0192 Acc: 0.6411\n","val Loss: 1.0275 Acc: 0.6756\n","\n","Epoch 11/99\n","----------\n","train Loss: 1.0077 Acc: 0.6400\n","val Loss: 1.0851 Acc: 0.6222\n","\n","Epoch 12/99\n","----------\n","train Loss: 0.9443 Acc: 0.6678\n","val Loss: 0.9699 Acc: 0.6809\n","\n","Epoch 13/99\n","----------\n","train Loss: 0.9200 Acc: 0.6728\n","val Loss: 1.5221 Acc: 0.5556\n","\n","Epoch 14/99\n","----------\n","train Loss: 0.8985 Acc: 0.6861\n","val Loss: 0.9800 Acc: 0.6640\n","\n","Epoch 15/99\n","----------\n","train Loss: 0.7520 Acc: 0.7497\n","val Loss: 0.7739 Acc: 0.7467\n","\n","Epoch 16/99\n","----------\n","train Loss: 0.6599 Acc: 0.7718\n","val Loss: 0.7944 Acc: 0.7396\n","\n","Epoch 17/99\n","----------\n","train Loss: 0.6439 Acc: 0.7802\n","val Loss: 0.7304 Acc: 0.7636\n","\n","Epoch 18/99\n","----------\n","train Loss: 0.6630 Acc: 0.7684\n","val Loss: 0.6955 Acc: 0.7600\n","\n","Epoch 19/99\n","----------\n","train Loss: 0.6283 Acc: 0.7802\n","val Loss: 0.7420 Acc: 0.7502\n","\n","Epoch 20/99\n","----------\n","train Loss: 0.6330 Acc: 0.7794\n","val Loss: 0.7398 Acc: 0.7449\n","\n","Epoch 21/99\n","----------\n","train Loss: 0.6005 Acc: 0.7890\n","val Loss: 0.7460 Acc: 0.7476\n","\n","Epoch 22/99\n","----------\n","train Loss: 0.6208 Acc: 0.7867\n","val Loss: 0.7730 Acc: 0.7493\n","\n","Epoch 23/99\n","----------\n","train Loss: 0.5756 Acc: 0.8004\n","val Loss: 0.7670 Acc: 0.7538\n","\n","Epoch 24/99\n","----------\n","train Loss: 0.5301 Acc: 0.8164\n","val Loss: 0.7268 Acc: 0.7520\n","\n","Epoch 25/99\n","----------\n","train Loss: 0.5911 Acc: 0.7966\n","val Loss: 0.6783 Acc: 0.7947\n","\n","Epoch 26/99\n","----------\n","train Loss: 0.5257 Acc: 0.8267\n","val Loss: 0.8988 Acc: 0.7049\n","\n","Epoch 27/99\n","----------\n","train Loss: 0.5467 Acc: 0.8110\n","val Loss: 0.6822 Acc: 0.7751\n","\n","Epoch 28/99\n","----------\n","train Loss: 0.5326 Acc: 0.8232\n","val Loss: 0.7533 Acc: 0.7520\n","\n","Epoch 29/99\n","----------\n","train Loss: 0.5453 Acc: 0.8141\n","val Loss: 0.8334 Acc: 0.7360\n","\n","Epoch 30/99\n","----------\n","train Loss: 0.4547 Acc: 0.8438\n","val Loss: 0.5387 Acc: 0.8311\n","\n","Epoch 31/99\n","----------\n","train Loss: 0.3959 Acc: 0.8690\n","val Loss: 0.5583 Acc: 0.8284\n","\n","Epoch 32/99\n","----------\n","train Loss: 0.3780 Acc: 0.8659\n","val Loss: 0.4947 Acc: 0.8311\n","\n","Epoch 33/99\n","----------\n","train Loss: 0.3940 Acc: 0.8709\n","val Loss: 0.5698 Acc: 0.8178\n","\n","Epoch 34/99\n","----------\n","train Loss: 0.3945 Acc: 0.8670\n","val Loss: 0.5341 Acc: 0.8293\n","\n","Epoch 35/99\n","----------\n","train Loss: 0.3568 Acc: 0.8823\n","val Loss: 0.5435 Acc: 0.8240\n","\n","Epoch 36/99\n","----------\n","train Loss: 0.3579 Acc: 0.8770\n","val Loss: 0.5020 Acc: 0.8409\n","\n","Epoch 37/99\n","----------\n","train Loss: 0.3633 Acc: 0.8789\n","val Loss: 0.4554 Acc: 0.8578\n","\n","Epoch 38/99\n","----------\n","train Loss: 0.3466 Acc: 0.8876\n","val Loss: 0.4967 Acc: 0.8444\n","\n","Epoch 39/99\n","----------\n","train Loss: 0.3334 Acc: 0.8922\n","val Loss: 0.5685 Acc: 0.8169\n","\n","Epoch 40/99\n","----------\n","train Loss: 0.3488 Acc: 0.8857\n","val Loss: 0.5790 Acc: 0.8276\n","\n","Epoch 41/99\n","----------\n","train Loss: 0.3430 Acc: 0.8804\n","val Loss: 0.4580 Acc: 0.8524\n","\n","Epoch 42/99\n","----------\n","train Loss: 0.3607 Acc: 0.8846\n","val Loss: 0.4890 Acc: 0.8436\n","\n","Epoch 43/99\n","----------\n","train Loss: 0.3199 Acc: 0.8880\n","val Loss: 0.5151 Acc: 0.8427\n","\n","Epoch 44/99\n","----------\n","train Loss: 0.3247 Acc: 0.8876\n","val Loss: 0.5200 Acc: 0.8382\n","\n","Epoch 45/99\n","----------\n","train Loss: 0.2761 Acc: 0.9120\n","val Loss: 0.6113 Acc: 0.8178\n","\n","Epoch 46/99\n","----------\n","train Loss: 0.2622 Acc: 0.9150\n","val Loss: 0.4627 Acc: 0.8613\n","\n","Epoch 47/99\n","----------\n","train Loss: 0.2465 Acc: 0.9166\n","val Loss: 0.4697 Acc: 0.8631\n","\n","Epoch 48/99\n","----------\n","train Loss: 0.2554 Acc: 0.9211\n","val Loss: 0.4146 Acc: 0.8684\n","\n","Epoch 49/99\n","----------\n","train Loss: 0.2469 Acc: 0.9204\n","val Loss: 0.4454 Acc: 0.8729\n","\n","Epoch 50/99\n","----------\n","train Loss: 0.2439 Acc: 0.9196\n","val Loss: 0.4105 Acc: 0.8640\n","\n","Epoch 51/99\n","----------\n","train Loss: 0.2413 Acc: 0.9154\n","val Loss: 0.4226 Acc: 0.8693\n","\n","Epoch 52/99\n","----------\n","train Loss: 0.2416 Acc: 0.9208\n","val Loss: 0.3873 Acc: 0.8862\n","\n","Epoch 53/99\n","----------\n","train Loss: 0.2416 Acc: 0.9242\n","val Loss: 0.4377 Acc: 0.8631\n","\n","Epoch 54/99\n","----------\n","train Loss: 0.2454 Acc: 0.9185\n","val Loss: 0.3976 Acc: 0.8693\n","\n","Epoch 55/99\n","----------\n","train Loss: 0.2529 Acc: 0.9177\n","val Loss: 0.4005 Acc: 0.8613\n","\n","Epoch 56/99\n","----------\n","train Loss: 0.2322 Acc: 0.9265\n","val Loss: 0.3884 Acc: 0.8844\n","\n","Epoch 57/99\n","----------\n","train Loss: 0.2468 Acc: 0.9162\n","val Loss: 0.4125 Acc: 0.8720\n","\n","Epoch 58/99\n","----------\n","train Loss: 0.2265 Acc: 0.9238\n","val Loss: 0.4143 Acc: 0.8764\n","\n","Epoch 59/99\n","----------\n","train Loss: 0.2277 Acc: 0.9257\n","val Loss: 0.3861 Acc: 0.8782\n","\n","Epoch 60/99\n","----------\n","train Loss: 0.2189 Acc: 0.9303\n","val Loss: 0.3605 Acc: 0.8996\n","\n","Epoch 61/99\n","----------\n","train Loss: 0.2043 Acc: 0.9398\n","val Loss: 0.4014 Acc: 0.8756\n","\n","Epoch 62/99\n","----------\n","train Loss: 0.1869 Acc: 0.9429\n","val Loss: 0.4010 Acc: 0.8773\n","\n","Epoch 63/99\n","----------\n","train Loss: 0.2114 Acc: 0.9299\n","val Loss: 0.3593 Acc: 0.8862\n","\n","Epoch 64/99\n","----------\n","train Loss: 0.2176 Acc: 0.9238\n","val Loss: 0.4068 Acc: 0.8756\n","\n","Epoch 65/99\n","----------\n","train Loss: 0.1838 Acc: 0.9425\n","val Loss: 0.4030 Acc: 0.8773\n","\n","Epoch 66/99\n","----------\n","train Loss: 0.1931 Acc: 0.9402\n","val Loss: 0.3858 Acc: 0.8907\n","\n","Epoch 67/99\n","----------\n","train Loss: 0.1929 Acc: 0.9371\n","val Loss: 0.3441 Acc: 0.9040\n","\n","Epoch 68/99\n","----------\n","train Loss: 0.1790 Acc: 0.9429\n","val Loss: 0.3754 Acc: 0.8818\n","\n","Epoch 69/99\n","----------\n","train Loss: 0.1932 Acc: 0.9307\n","val Loss: 0.3711 Acc: 0.8827\n","\n","Epoch 70/99\n","----------\n","train Loss: 0.1920 Acc: 0.9371\n","val Loss: 0.3672 Acc: 0.8827\n","\n","Epoch 71/99\n","----------\n","train Loss: 0.1830 Acc: 0.9333\n","val Loss: 0.3897 Acc: 0.8844\n","\n","Epoch 72/99\n","----------\n","train Loss: 0.1776 Acc: 0.9448\n","val Loss: 0.3970 Acc: 0.8880\n","\n","Epoch 73/99\n","----------\n","train Loss: 0.1750 Acc: 0.9482\n","val Loss: 0.4218 Acc: 0.8756\n","\n","Epoch 74/99\n","----------\n","train Loss: 0.1700 Acc: 0.9451\n","val Loss: 0.3700 Acc: 0.8996\n","\n","Epoch 75/99\n","----------\n","train Loss: 0.1722 Acc: 0.9436\n","val Loss: 0.3597 Acc: 0.8924\n","\n","Epoch 76/99\n","----------\n","train Loss: 0.1671 Acc: 0.9467\n","val Loss: 0.4857 Acc: 0.8667\n","\n","Epoch 77/99\n","----------\n","train Loss: 0.1768 Acc: 0.9417\n","val Loss: 0.3742 Acc: 0.8871\n","\n","Epoch 78/99\n","----------\n","train Loss: 0.1895 Acc: 0.9379\n","val Loss: 0.3754 Acc: 0.8889\n","\n","Epoch 79/99\n","----------\n","train Loss: 0.1596 Acc: 0.9490\n","val Loss: 0.3228 Acc: 0.8907\n","\n","Epoch 80/99\n","----------\n","train Loss: 0.1735 Acc: 0.9448\n","val Loss: 0.3676 Acc: 0.8969\n","\n","Epoch 81/99\n","----------\n","train Loss: 0.1793 Acc: 0.9436\n","val Loss: 0.3634 Acc: 0.8942\n","\n","Epoch 82/99\n","----------\n","train Loss: 0.1702 Acc: 0.9463\n","val Loss: 0.3738 Acc: 0.8969\n","\n","Epoch 83/99\n","----------\n","train Loss: 0.1586 Acc: 0.9474\n","val Loss: 0.4132 Acc: 0.8916\n","\n","Epoch 84/99\n","----------\n","train Loss: 0.1716 Acc: 0.9459\n","val Loss: 0.3593 Acc: 0.8916\n","\n","Epoch 85/99\n","----------\n","train Loss: 0.1563 Acc: 0.9482\n","val Loss: 0.4228 Acc: 0.8702\n","\n","Epoch 86/99\n","----------\n","train Loss: 0.1745 Acc: 0.9470\n","val Loss: 0.3406 Acc: 0.8978\n","\n","Epoch 87/99\n","----------\n","train Loss: 0.1607 Acc: 0.9501\n","val Loss: 0.3496 Acc: 0.8969\n","\n","Epoch 88/99\n","----------\n","train Loss: 0.1530 Acc: 0.9524\n","val Loss: 0.3949 Acc: 0.8773\n","\n","Epoch 89/99\n","----------\n","train Loss: 0.1575 Acc: 0.9486\n","val Loss: 0.3682 Acc: 0.8898\n","\n","Epoch 90/99\n","----------\n","train Loss: 0.1453 Acc: 0.9558\n","val Loss: 0.3740 Acc: 0.8862\n","\n","Epoch 91/99\n","----------\n","train Loss: 0.1554 Acc: 0.9528\n","val Loss: 0.3782 Acc: 0.8738\n","\n","Epoch 92/99\n","----------\n","train Loss: 0.1605 Acc: 0.9505\n","val Loss: 0.4002 Acc: 0.8916\n","\n","Epoch 93/99\n","----------\n","train Loss: 0.1561 Acc: 0.9535\n","val Loss: 0.3406 Acc: 0.9004\n","\n","Epoch 94/99\n","----------\n","train Loss: 0.1515 Acc: 0.9554\n","val Loss: 0.3855 Acc: 0.8844\n","\n","Epoch 95/99\n","----------\n","train Loss: 0.1475 Acc: 0.9543\n","val Loss: 0.4324 Acc: 0.8800\n","\n","Epoch 96/99\n","----------\n","train Loss: 0.1366 Acc: 0.9547\n","val Loss: 0.3817 Acc: 0.8889\n","\n","Epoch 97/99\n","----------\n","train Loss: 0.1533 Acc: 0.9524\n","val Loss: 0.3651 Acc: 0.8924\n","\n","Epoch 98/99\n","----------\n","train Loss: 0.1581 Acc: 0.9554\n","val Loss: 0.3544 Acc: 0.8987\n","\n","Epoch 99/99\n","----------\n","train Loss: 0.1441 Acc: 0.9543\n","val Loss: 0.3459 Acc: 0.9004\n","\n","Training complete in 16m 51s\n","Best val Acc: 0.904000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"iTf44fJfsEjU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":366},"executionInfo":{"status":"ok","timestamp":1600865007557,"user_tz":-180,"elapsed":1757,"user":{"displayName":"Александра Молоденова","photoUrl":"","userId":"08704390804978209018"}},"outputId":"1e88c636-a926-4b20-8ff3-6f2e6d743752"},"source":["from matplotlib.pyplot import imshow\n","\n","def visualize_model(model, num_images=6):\n","    was_training = model.training\n","    model.eval()\n","    images_so_far = 0\n","    fig = plt.figure()\n","\n","    with torch.no_grad():\n","        for i, (inputs, labels) in enumerate(dataloaders['val']):\n","            inputs = inputs.to(device)\n","            labels = labels.to(device)\n","\n","            outputs = model(inputs)\n","            _, preds = torch.max(outputs, 1)\n","\n","            for j in range(inputs.size()[0]):\n","                images_so_far += 1\n","                ax = plt.subplot(num_images//2, 2, images_so_far)\n","                ax.axis('off')\n","                ax.set_title('predicted: {}'.format(class_names[preds[j]]))\n","                im = np.expand_dims(inputs.cpu().data[j], axis=0)\n","                imshow((np.squeeze(inputs.cpu().data[j])).permute(1, 2, 0) )\n","\n","                if images_so_far == num_images:\n","                    model.train(mode=was_training)\n","                    return\n","        model.train(mode=was_training)\n","\n","\n","visualize_model(model_ft)\n","\n","plt.ioff()\n","plt.show()"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"X74V2gj5sEjW","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"1E1CK7lisEjZ","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"l9z5nXPBsEjb","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"U02n23oTsEjd","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"FRLe_h3KsEjg","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"7kD43LInsEji","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"HPxy6cE-sEjl","colab_type":"code","colab":{}},"source":["dataset = torchvision.datasets.ImageFolder(imgFolder,transform = transforms.Compose([transforms.Resize((256,256)),transforms.ToTensor()]))\n","batch_size = 32\n","validation_split = .3\n","shuffle_dataset = True\n","random_seed= 8\n","\n","dataset_size = len(dataset)\n","indices = list(range(dataset_size))\n","split = int(np.floor(validation_split * dataset_size))\n","if shuffle_dataset :\n","    np.random.seed(random_seed)\n","    np.random.shuffle(indices)\n","train_indices, val_indices = indices[split:], indices[:split]\n","\n","train_sampler = SubsetRandomSampler(train_indices)\n","valid_sampler = SubsetRandomSampler(val_indices)\n","\n","train_loader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","                                           sampler=train_sampler)\n","validation_loader = torch.utils.data.DataLoader(dataset,\n","                                                sampler=valid_sampler)\n","dataset"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"Bn0NjNRQsEjn","colab_type":"code","colab":{}},"source":["from torchvision import datasets, transforms as T\n","import torch\n","\n","model = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True)\n","model.eval()\n","\n","# first_conv_layer = [torch.nn.Conv2d(1, 3, kernel_size=3, stride=1, padding=1, dilation=1, groups=1, bias=True)]\n","# first_conv_layer.extend(list(model.children()))\n","# model.features= torch.nn.Sequential(*first_conv_layer)\n","# output = model(x)\n","# modules = list(model.children())[:-1]      # delete the last fc layer.\n","# model = torch.nn.Sequential(*first_conv_layer)\n","\n","loss = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=1.0e-3)\n","\n","# model_ft, hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=num_epochs, is_inception=(model_name==\"inception\"))\n","\n","for epoch in range(10000):\n","    for i, btch in enumerate(train_loader):\n","        x_train, labels_train = btch\n","        # resize = torchvision.transforms.Resize(x_train[0].shape)\n","        # x_train = resize(x_train)\n","        x_train = torch.Tensor(x_train).float()\n","        optimizer.zero_grad()\n","\n","        preds = model.forward(x_train)\n","\n","        loss_value = loss(preds, labels_train)\n","        loss_value.backward()\n","\n","        optimizer.step()\n","\n","    # acc = []\n","    x_test, target = validation_loader\n","    test_preds = model.forward(x_test)\n","    # test_loss_history.append(loss(test_preds, target))\n","    acc=(test_preds.argmax(dim=1) == target).float()\n","    # train_preds = mnist_net.forward(X_train)\n","    # train_loss_history.append(loss(train_preds, y_train))\n","\n","    # print(acc)\n","    accuracy =acc.mean()\n","    # accuracy = (test_preds.argmax(dim=1) == y_test).float().mean()\n","    # accuracy = (train_preds.argmax(dim=1) == y_train).float().mean()\n","    # test_accuracy_history.append(accuracy)\n","    # train_accuracy_history.append(accuracy)\n","    print(accuracy)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"u3lOk6uksEjp","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"pycharm":{"name":"#%%\n"},"id":"7wzMu4ZQsEjr","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0L5WBM4usEjt","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VR_G6apssEjw","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}